--------------------------COMPARAR OBJETOS
--Para poder comparar objetos (por ejemplo, para ordenarlos en una coleccion) es necesario definir el metodo MAP o el metodo ORDER:
--MAP: Funcion que devuelve un escalar (CHAR, VARCHAR2, NUMBER, DATE,...) que se utilizara en las comparaciones y ordenaciones, aplicando los criterios establecidos para cada tipo de datos
--ORDER: Funcion toma como argumento otro objeto y lo compara con el receptor del mensaje ORDER, devolviendo un entero >0 si el objeto argumento es mayor, <0 si es menor y = 0 si son iguales.

--Los metodos ORDER son menos eficientes y se utilizan cuando el criterio de compracion es muy complejo como para implementarlo con un metodo MAP


CREATE OR REPLACE TYPE PERSONA AS OBJECT
(
  CODIGO NUMBER,
  NOMBRE VARCHAR2(35),
  DIREC DIRECCION,
  FECHA_NAC DATE,
  MAP MEMBER FUNCTION POR_CODIGO RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY PERSONA AS
  MAP MEMBER FUNCTION POR_CODIGO RETURN VARCHAR2 IS
  BEGIN
    RETURN NOMBRE || CODIGO;
  END;
END;
/

--
DECLARE
  P1 PERSONA := PERSONA(NULL,NULL,NULL,NULL);
  P2 PERSONA:= PERSONA(NULL,NULL,NULL,NULL);
BEGIN
  P1.CODIGO := 1;
  P1.NOMBRE := 'JUAN';
  P2.CODIGO := 1;
  P2.NOMBRE := 'MANUEL';
  IF P1 = P2 THEN
    DBMS_OUTPUT.PUT_LINE('A) OBJETOS IGUALES');   
  ELSE
    DBMS_OUTPUT.PUT_LINE('A) OBJETOS DISTINTOS');
  END IF;
  
  IF P1.CODIGO = P2.CODIGO AND P1.NOMBRE = P2.NOMBRE
  THEN
     DBMS_OUTPUT.PUT_LINE('B) OBJETOS IGUALES'); 
  ELSE
     DBMS_OUTPUT.PUT_LINE('B) OBJETOS DISTINTOS'); 
  END IF;
  
END;
/

-- ACTIVIDAD: 
--*Crea los tipos EMPLEADO, DEPARTAMENTO, DIRECCION que tengan sus constructores, getters y setters

CREATE OR REPLACE TYPE DIRECCION AS OBJECT
(
    ID NUMBER,
    CALLE VARCHAR2(30),
    NUMERO VARCHAR2(5),
    CP CHAR(5),
    PROVINCIA VARCHAR(35),
    MEMBER PROCEDURE SET_CALLE(C VARCHAR2),
    MEMBER FUNCTION GET_CALLE RETURN VARCHAR2,
    MEMBER PROCEDURE SET_NUMERO(N VARCHAR2),
    MEMBER FUNCTION GET_NUMERO RETURN VARCHAR2,
    MEMBER PROCEDURE SET_CP(CP VARCHAR2),
    MEMBER FUNCTION GET_CP RETURN VARCHAR2,
    MEMBER PROCEDURE SET_PROVINCIA(P VARCHAR2),
    MEMBER FUNCTION GET_PROVINCIA RETURN VARCHAR2,
    CONSTRUCTOR FUNCTION DIRECCION(CALLE VARCHAR2, NUMERO VARCHAR2, CP CHAR, PROVINCIA VARCHAR2) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY DIRECCION AS
  --
  MEMBER PROCEDURE SET_CALLE(C VARCHAR2) IS
  BEGIN
    CALLE := C;
  END;
  --
  MEMBER FUNCTION GET_CALLE RETURN VARCHAR2 IS
  BEGIN
    RETURN CALLE;
  END;
  --
  MEMBER PROCEDURE SET_NUMERO(N VARCHAR2) IS
  BEGIN
    NUMERO := N;
  END;
  --
  MEMBER FUNCTION GET_NUMERO RETURN VARCHAR2 IS
  BEGIN
    RETURN NUMERO;
  END;
  --
  MEMBER PROCEDURE SET_CP(CP VARCHAR2) IS
  BEGIN
    SELF.CP := CP;
  END;
  --
  MEMBER FUNCTION GET_CP RETURN VARCHAR2 IS
  BEGIN
    RETURN CP;
  END;
  --
  MEMBER PROCEDURE SET_PROVINCIA(P VARCHAR2) IS
  BEGIN
    PROVINCIA := P;
  END;
  --
  MEMBER FUNCTION GET_PROVINCIA RETURN VARCHAR2 IS
  BEGIN
    RETURN PROVINCIA;
  END;
  --
  CONSTRUCTOR FUNCTION DIRECCION (CALLE VARCHAR2, NUMERO VARCHAR2, CP CHAR, PROVINCIA VARCHAR2) RETURN SELF AS RESULT IS  
  BEGIN
    SELF.CALLE := CALLE;
    SELF.NUMERO := NUMERO;
    SELF.CP := CP;
    SELF.PROVINCIA := PROVINCIA;
    RETURN;
  END;
  --
END;
/

CREATE OR REPLACE TYPE EMPLEADO AS OBJECT
(
    ID NUMBER,
    NOMBRE VARCHAR(35),
    APELLIDOS VARCHAR(250),
    SALARIO NUMBER,
    DIR DIRECCION,
    MEMBER PROCEDURE SET_NOMBRE(N VARCHAR2),
    MEMBER FUNCTION GET_NOMBRE RETURN VARCHAR2,
    MEMBER PROCEDURE SET_APELLIDOS(A VARCHAR2),
    MEMBER FUNCTION GET_APELLIDOS RETURN VARCHAR2,
    MEMBER PROCEDURE SET_SALARIO(S NUMBER),
    MEMBER FUNCTION GET_SALARIO RETURN NUMBER,
    MEMBER PROCEDURE SET_DIR(D DIRECCION),
    MEMBER FUNCTION GET_DIR RETURN DIRECCION,
    CONSTRUCTOR FUNCTION EMPLEADO(NOMBRE VARCHAR2, APELLIDOS VARCHAR2, SALARIO NUMBER, DIR DIRECCION) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY EMPLEADO AS
  --
  MEMBER PROCEDURE SET_NOMBRE(N VARCHAR2) IS
  BEGIN
    NOMBRE := N;
  END;
  --
  MEMBER FUNCTION GET_NOMBRE RETURN VARCHAR2 IS
  BEGIN
    RETURN NOMBRE;
  END;
  --
  MEMBER PROCEDURE SET_APELLIDOS(A VARCHAR2) IS
  BEGIN
    APELLIDOS := A;
  END;
  --
  MEMBER FUNCTION GET_APELLIDOS RETURN VARCHAR2 IS
  BEGIN
    RETURN APELLIDOS;
  END;
  --
  MEMBER PROCEDURE SET_SALARIO(S NUMBER) IS
  BEGIN
    SALARIO := S;
  END;
  --
  MEMBER FUNCTION GET_SALARIO RETURN NUMBER IS
  BEGIN
    RETURN SALARIO;
  END;
  --
  MEMBER PROCEDURE SET_DIR(D DIRECCION) IS
  BEGIN
    DIR := D;
  END;
  --
  MEMBER FUNCTION GET_DIR RETURN DIRECCION IS
  BEGIN
    RETURN DIR;
  END;
  --
  CONSTRUCTOR FUNCTION EMPLEADO (NOMBRE VARCHAR2, APELLIDOS VARCHAR2, SALARIO NUMBER, DIR DIRECCION) RETURN SELF AS RESULT IS  
  BEGIN
    SELF.NOMBRE := NOMBRE;
    SELF.APELLIDOS := APELLIDOS;
    SELF.SALARIO := SALARIO;
    SELF.DIR := DIR;
    RETURN;
  END;
  --
END;
/

CREATE OR REPLACE TYPE DEPARTAMENTO AS OBJECT
(
    ID NUMBER,
    DENOM VARCHAR2(35),
    DIR DIRECCION,
    MEMBER PROCEDURE SET_DENOM(DENOM VARCHAR2),
    MEMBER FUNCTION GET_DENOM RETURN VARCHAR2,
    MEMBER PROCEDURE SET_DIR(DIR DIRECCION),
    MEMBER FUNCTION GET_DIR RETURN DIRECCION,
    CONSTRUCTOR FUNCTION DEPARTAMENTO(ID NUMBER, DENOM VARCHAR2, DIR DIRECCION) RETURN SELF AS RESULT
);
/

CREATE OR REPLACE TYPE BODY DEPARTAMENTO AS
  --
  MEMBER PROCEDURE SET_DENOM(D VARCHAR2) IS
  BEGIN
    DENOM := D;
  END;
  --
  MEMBER FUNCTION GET_DENOM RETURN VARCHAR2 IS
  BEGIN
    RETURN DENOM;
  END;
  --
  MEMBER PROCEDURE SET_DIR(D DIRECCION) IS
  BEGIN
    DIR := D;
  END;
  --
  MEMBER FUNCTION GET_DIR RETURN DIRECCION IS
  BEGIN
    RETURN DIRECCION;
  END;
  --
  CONSTRUCTOR FUNCTION DEPARTAMENTO(ID NUMBER, DENOM VARCHAR2, DIR DIRECCION) RETURN SELF AS RESULT IS  
  BEGIN
    SELF.ID := ID;
    SELF.DENOM := DENOM;
    SELF.DIR := DIR;
    RETURN;
  END;
  --
END;
/



